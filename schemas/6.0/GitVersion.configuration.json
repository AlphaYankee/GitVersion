{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://gitversion.net/schemas/6.0/GitVersion.configuration.json",
  "title": "GitVersion Configuration (6.0)",
  "description": "GitVersion configuration schema (6.0)",
  "type": "object",
  "properties": {
    "assembly-file-versioning-format": {
      "description": "Specifies the format of AssemblyFileVersion and overwrites the value of assembly-file-versioning-scheme.",
      "type": "string"
    },
    "assembly-file-versioning-scheme": {
      "description": "The scheme to use when setting AssemblyFileVersion attribute. Can be \u0027MajorMinorPatchTag\u0027, \u0027MajorMinorPatch\u0027, \u0027MajorMinor\u0027, \u0027Major\u0027, \u0027None\u0027.",
      "enum": [
        "MajorMinorPatchTag",
        "MajorMinorPatch",
        "MajorMinor",
        "Major",
        "None"
      ]
    },
    "assembly-informational-format": {
      "description": "Specifies the format of AssemblyInformationalVersion. The default value is {InformationalVersion}.",
      "type": "string"
    },
    "assembly-versioning-format": {
      "description": "Specifies the format of AssemblyVersion and overwrites the value of assembly-versioning-scheme.",
      "type": "string"
    },
    "assembly-versioning-scheme": {
      "description": "The scheme to use when setting AssemblyVersion attribute. Can be \u0027MajorMinorPatchTag\u0027, \u0027MajorMinorPatch\u0027, \u0027MajorMinor\u0027, \u0027Major\u0027, \u0027None\u0027.",
      "enum": [
        "MajorMinorPatchTag",
        "MajorMinorPatch",
        "MajorMinor",
        "Major",
        "None"
      ]
    },
    "branches": {
      "description": "The header for all the individual branch configuration.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/$defs/branchConfiguration"
      }
    },
    "commit-date-format": {
      "format": "date-time",
      "pattern": "\u0027yyyy-MM-dd\u0027",
      "description": "The format to use when calculating the commit date. Defaults to \u0027yyyy-MM-dd\u0027.",
      "type": "string"
    },
    "commit-message-incrementing": {
      "$ref": "#/$defs/nullableOfCommitMessageIncrementMode"
    },
    "ignore": {
      "description": "The header property for the ignore configuration.",
      "type": "object",
      "properties": {
        "commits-before": {
          "$ref": "#/$defs/nullableOfDateTimeOffset"
        },
        "sha": {
          "$ref": "#/$defs/hashSetOfString2"
        }
      }
    },
    "increment": {
      "$ref": "#/$defs/incrementStrategy"
    },
    "is-mainline": {
      "$ref": "#/$defs/nullableOfBoolean"
    },
    "is-release-branch": {
      "$ref": "#/$defs/nullableOfBoolean1"
    },
    "is-source-branch-for": {
      "$ref": "#/$defs/hashSetOfString"
    },
    "label": {
      "$ref": "#/$defs/string"
    },
    "label-number-pattern": {
      "$ref": "#/$defs/string1"
    },
    "major-version-bump-message": {
      "format": "regex",
      "pattern": "\u0027\\\u002Bsemver:\\s?(breaking|major)\u0027",
      "description": "The regular expression to match commit messages with to perform a major version increment. Default set to \u0027\\\u002Bsemver:\\s?(breaking|major)\u0027",
      "type": "string"
    },
    "merge-message-formats": {
      "description": "Custom merge message formats to enable identification of merge messages that do not follow the built-in conventions.",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "minor-version-bump-message": {
      "format": "regex",
      "pattern": "\u0027\\\u002Bsemver:\\s?(feature|minor)\u0027",
      "description": "The regular expression to match commit messages with to perform a minor version increment. Default set to \u0027\\\u002Bsemver:\\s?(feature|minor)\u0027",
      "type": "string"
    },
    "next-version": {
      "description": "Allows you to bump the next version explicitly. Useful for bumping main or a feature branch with breaking changes",
      "type": "string"
    },
    "no-bump-message": {
      "format": "regex",
      "pattern": "\u0027\\\u002Bsemver:\\s?(none|skip)\u0027",
      "description": "Used to tell GitVersion not to increment when in Mainline development mode. . Default set to \u0027\\\u002Bsemver:\\s?(none|skip)\u0027",
      "type": "string"
    },
    "patch-version-bump-message": {
      "format": "regex",
      "pattern": "\u0027\\\u002Bsemver:\\s?(fix|patch)\u0027",
      "description": "The regular expression to match commit messages with to perform a patch version increment. Default set to \u0027\\\u002Bsemver:\\s?(fix|patch)\u0027",
      "type": "string"
    },
    "pre-release-weight": {
      "$ref": "#/$defs/nullableOfInt32"
    },
    "prevent-increment-of-merged-branch-version": {
      "$ref": "#/$defs/nullableOfBoolean2"
    },
    "regex": {
      "$ref": "#/$defs/string2"
    },
    "semantic-version-format": {
      "description": "Specifies the semantic version format that is used when parsing the string. Can be \u0027Strict\u0027 or \u0027Loose\u0027.",
      "enum": [
        "Strict",
        "Loose"
      ]
    },
    "source-branches": {
      "$ref": "#/$defs/hashSetOfString1"
    },
    "tag-prefix": {
      "description": "A regular expression which is used to trim Git tags before processing. Defaults to [vV]?",
      "type": "string"
    },
    "tag-pre-release-weight": {
      "description": "The pre-release weight in case of tagged commits. Defaults to 60000.",
      "type": [
        "integer",
        "null"
      ]
    },
    "track-merge-message": {
      "$ref": "#/$defs/nullableOfBoolean3"
    },
    "track-merge-target": {
      "$ref": "#/$defs/nullableOfBoolean4"
    },
    "tracks-release-branches": {
      "$ref": "#/$defs/nullableOfBoolean5"
    },
    "update-build-number": {
      "description": "Whether to update the build number in the project file. Defaults to true.",
      "type": "boolean"
    },
    "version-in-branch-pattern": {
      "description": "A regular expression which is used to determine the version number in the branch name or commit message (e.g., v1.0.0-LTS). The default value is \u0027(?\u003Cversion\u003E[vV]?\\d\u002B(\\.\\d\u002B)?(\\.\\d\u002B)?).*\u0027.",
      "type": "string"
    },
    "mode": {
      "$ref": "#/$defs/nullableOfVersioningMode"
    },
    "workflow": {
      "description": "The base template of the configuration to use. Possible values are: GitFlow/v1 or GitHubFlow/v1",
      "type": "string"
    }
  },
  "$defs": {
    "branchConfiguration": {
      "type": "object",
      "properties": {
        "commit-message-incrementing": {
          "$ref": "#/$defs/nullableOfCommitMessageIncrementMode"
        },
        "increment": {
          "$ref": "#/$defs/incrementStrategy"
        },
        "is-mainline": {
          "$ref": "#/$defs/nullableOfBoolean"
        },
        "is-release-branch": {
          "$ref": "#/$defs/nullableOfBoolean1"
        },
        "is-source-branch-for": {
          "$ref": "#/$defs/hashSetOfString"
        },
        "label": {
          "$ref": "#/$defs/string"
        },
        "label-number-pattern": {
          "$ref": "#/$defs/string1"
        },
        "pre-release-weight": {
          "$ref": "#/$defs/nullableOfInt32"
        },
        "prevent-increment-of-merged-branch-version": {
          "$ref": "#/$defs/nullableOfBoolean2"
        },
        "regex": {
          "$ref": "#/$defs/string2"
        },
        "source-branches": {
          "$ref": "#/$defs/hashSetOfString1"
        },
        "track-merge-message": {
          "$ref": "#/$defs/nullableOfBoolean3"
        },
        "track-merge-target": {
          "$ref": "#/$defs/nullableOfBoolean4"
        },
        "tracks-release-branches": {
          "$ref": "#/$defs/nullableOfBoolean5"
        },
        "mode": {
          "$ref": "#/$defs/nullableOfVersioningMode"
        }
      }
    },
    "nullableOfCommitMessageIncrementMode": {
      "description": "Sets whether it should be possible to increment the version with special syntax in the commit message. Can be \u0027Disabled\u0027, \u0027Enabled\u0027 or \u0027MergeMessageOnly\u0027.",
      "enum": [
        "Enabled",
        "Disabled",
        "MergeMessageOnly"
      ]
    },
    "incrementStrategy": {
      "description": "The increment strategy for this branch. Can be \u0027Inherit\u0027, \u0027Patch\u0027, \u0027Minor\u0027, \u0027Major\u0027, \u0027None\u0027.",
      "enum": [
        "None",
        "Major",
        "Minor",
        "Patch",
        "Inherit"
      ]
    },
    "nullableOfBoolean": {
      "description": "When using Mainline mode, this indicates that this branch is a mainline. By default main and support/* are mainlines.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "nullableOfBoolean1": {
      "description": "Indicates this branch configuration represents a release branch in GitFlow.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "hashSetOfString": {
      "description": "The branches that this branch is a source branch.",
      "type": "array",
      "items": {
        "description": "The branches that this branch is a source branch.",
        "type": "string"
      }
    },
    "string": {
      "description": "The label to use for this branch. Use the value {BranchName} or similar as a placeholder to insert a named capture group from RegularExpression (fx. the branch name).",
      "type": "string"
    },
    "string1": {
      "format": "regex",
      "pattern": "[/-](?\u003Cnumber\u003E\\d\u002B)[-/]",
      "description": "The regular expression pattern to use to extract the number from the branch name. Defaults to \u0027[/-](?\u003Cnumber\u003E\\d\u002B)[-/]\u0027.",
      "type": "string"
    },
    "nullableOfInt32": {
      "description": "Provides a way to translate the PreReleaseLabel to a number.",
      "type": [
        "integer",
        "null"
      ]
    },
    "nullableOfBoolean2": {
      "description": "Prevent increment of merged branch version.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "string2": {
      "description": "The regular expression pattern to use to match this branch.",
      "type": "string"
    },
    "hashSetOfString1": {
      "description": "The source branches for this branch.",
      "type": "array",
      "items": {
        "description": "The source branches for this branch.",
        "type": "string"
      }
    },
    "nullableOfBoolean3": {
      "description": "This property is a branch related property and gives the user the possibility to control the behavior of whether the merge commit message will be interpreted as a next version or not.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "nullableOfBoolean4": {
      "description": "Strategy which will look for tagged merge commits directly off the current branch.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "nullableOfBoolean5": {
      "description": "Indicates this branch configuration represents develop in GitFlow.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "nullableOfVersioningMode": {
      "description": "The versioning mode for this branch. Can be \u0027ContinuousDelivery\u0027, \u0027ContinuousDeployment\u0027, \u0027Mainline\u0027.",
      "enum": [
        "ContinuousDelivery",
        "ContinuousDeployment",
        "Mainline"
      ]
    },
    "nullableOfDateTimeOffset": {
      "format": "date-time",
      "pattern": "\u0027yyyy-MM-ddTHH:mm:ss\u0027",
      "description": "Commits before this date will be ignored. Format: yyyy-MM-ddTHH:mm:ss.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "date": {
          "$ref": "#/$defs/dateTime"
        },
        "date-time": {
          "$ref": "#/$defs/dateTime"
        },
        "day": {
          "$ref": "#/$defs/integer"
        },
        "day-of-week": {
          "enum": [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday"
          ],
          "readOnly": true
        },
        "day-of-year": {
          "$ref": "#/$defs/integer"
        },
        "hour": {
          "$ref": "#/$defs/integer"
        },
        "local-date-time": {
          "$ref": "#/$defs/dateTime"
        },
        "microsecond": {
          "$ref": "#/$defs/integer"
        },
        "millisecond": {
          "$ref": "#/$defs/integer"
        },
        "minute": {
          "$ref": "#/$defs/integer"
        },
        "month": {
          "$ref": "#/$defs/integer"
        },
        "nanosecond": {
          "$ref": "#/$defs/integer"
        },
        "offset": {
          "$ref": "#/$defs/timeSpan"
        },
        "second": {
          "$ref": "#/$defs/integer"
        },
        "ticks": {
          "$ref": "#/$defs/integer1"
        },
        "time-of-day": {
          "$ref": "#/$defs/timeSpan"
        },
        "utc-date-time": {
          "$ref": "#/$defs/dateTime"
        },
        "utc-ticks": {
          "$ref": "#/$defs/integer1"
        },
        "year": {
          "$ref": "#/$defs/integer"
        }
      }
    },
    "dateTimeOffset": {
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "date": {
          "$ref": "#/$defs/dateTime"
        },
        "date-time": {
          "$ref": "#/$defs/dateTime"
        },
        "day": {
          "$ref": "#/$defs/integer"
        },
        "day-of-week": {
          "enum": [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday"
          ],
          "readOnly": true
        },
        "day-of-year": {
          "$ref": "#/$defs/integer"
        },
        "hour": {
          "$ref": "#/$defs/integer"
        },
        "local-date-time": {
          "$ref": "#/$defs/dateTime"
        },
        "microsecond": {
          "$ref": "#/$defs/integer"
        },
        "millisecond": {
          "$ref": "#/$defs/integer"
        },
        "minute": {
          "$ref": "#/$defs/integer"
        },
        "month": {
          "$ref": "#/$defs/integer"
        },
        "nanosecond": {
          "$ref": "#/$defs/integer"
        },
        "offset": {
          "$ref": "#/$defs/timeSpan"
        },
        "second": {
          "$ref": "#/$defs/integer"
        },
        "ticks": {
          "$ref": "#/$defs/integer1"
        },
        "time-of-day": {
          "$ref": "#/$defs/timeSpan"
        },
        "utc-date-time": {
          "$ref": "#/$defs/dateTime"
        },
        "utc-ticks": {
          "$ref": "#/$defs/integer1"
        },
        "year": {
          "$ref": "#/$defs/integer"
        }
      }
    },
    "dateTime": {
      "type": "string",
      "format": "date-time",
      "readOnly": true
    },
    "integer": {
      "type": "integer",
      "readOnly": true
    },
    "timeSpan": {
      "type": "object",
      "properties": {
        "days": {
          "$ref": "#/$defs/integer"
        },
        "hours": {
          "$ref": "#/$defs/integer"
        },
        "microseconds": {
          "$ref": "#/$defs/integer"
        },
        "milliseconds": {
          "$ref": "#/$defs/integer"
        },
        "minutes": {
          "$ref": "#/$defs/integer"
        },
        "nanoseconds": {
          "$ref": "#/$defs/integer"
        },
        "seconds": {
          "$ref": "#/$defs/integer"
        },
        "ticks": {
          "$ref": "#/$defs/integer1"
        },
        "total-days": {
          "$ref": "#/$defs/number"
        },
        "total-hours": {
          "$ref": "#/$defs/number"
        },
        "total-microseconds": {
          "$ref": "#/$defs/number"
        },
        "total-milliseconds": {
          "$ref": "#/$defs/number"
        },
        "total-minutes": {
          "$ref": "#/$defs/number"
        },
        "total-nanoseconds": {
          "$ref": "#/$defs/number"
        },
        "total-seconds": {
          "$ref": "#/$defs/number"
        }
      },
      "readOnly": true
    },
    "integer1": {
      "type": "integer",
      "readOnly": true
    },
    "number": {
      "type": "number",
      "readOnly": true
    },
    "hashSetOfString2": {
      "description": "A sequence of SHAs to be excluded from the version calculations.",
      "type": "array",
      "items": {
        "description": "A sequence of SHAs to be excluded from the version calculations.",
        "type": "string"
      }
    }
  }
}